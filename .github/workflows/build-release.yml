# .github/workflows/build-release.yml
name: Build and Release

on:
  push:
    tags:
      - 'v*'  # –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–≥–∞ –≤–µ—Ä—Å–∏–∏

jobs:
  build:
    runs-on: windows-latest
    if: github.actor == 'Slipfaith'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à username

    environment: production  # –¢—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # –ü–æ–ª—É—á–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏

    - name: Verify tag creator
      run: |
        $tagCreator = git log -1 --format='%an' $env:GITHUB_REF
        if ($tagCreator -ne "Slipfaith") {  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–µ –∏–º—è
          Write-Error "Tag not created by authorized user"
          exit 1
        }

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Security scan before build
      run: |
        pip install bandit safety
        bandit -r . || exit 1
        safety check || exit 1

    - name: Create executable
      run: |
        pyinstaller --onefile --windowed --icon=icon.ico main.py

    - name: Sign executable (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      run: |
        # –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–æ–¥-signing —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        # signtool sign /f "cert.p12" /p "${{ secrets.CERT_PASSWORD }}" /t http://timestamp.digicert.com dist/main.exe

    - name: Calculate checksum
      run: |
        $hash = Get-FileHash -Path "dist/main.exe" -Algorithm SHA256
        $hash.Hash | Out-File -FilePath "dist/main.exe.sha256" -Encoding ascii
        Write-Output "SHA256: $($hash.Hash)"

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/main.exe
          dist/main.exe.sha256
        body: |
          ## üöÄ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è ${{ github.ref_name }}
          
          ### üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
          - ‚úÖ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞
          - ‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–∞ –Ω–∞ –≤–∏—Ä—É—Å—ã
          - ‚úÖ SHA256: —Å–º. —Ñ–∞–π–ª .sha256
          
          ### ‚ö†Ô∏è –í–∞–∂–Ω–æ
          –°–∫–∞—á–∏–≤–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–ª–∏–∑–æ–≤!
          –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ SHA256 —Ö–µ—à –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.
          
          ### üìã –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å:
          ```powershell
          # –í PowerShell
          $hash = Get-FileHash -Path "main.exe" -Algorithm SHA256
          $expectedHash = Get-Content "main.exe.sha256"
          if ($hash.Hash -eq $expectedHash.Trim()) {
              Write-Host "‚úÖ –§–∞–π–ª –ø–æ–¥–ª–∏–Ω–Ω—ã–π" -ForegroundColor Green
          } else {
              Write-Host "‚ùå –í–ù–ò–ú–ê–ù–ò–ï: –§–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω!" -ForegroundColor Red
          }
          ```
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}